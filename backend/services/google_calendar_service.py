"""
Google Calendar API ÏÑúÎπÑÏä§
Google CalendarÏôÄ Ïã§Ï†ú ÏùºÏ†ïÏùÑ ÎèôÍ∏∞ÌôîÌïòÎäî ÏÑúÎπÑÏä§
"""

import os
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
try:
    import pytz
except ImportError:
    # pytzÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ datetimeÏùò timezone ÏÇ¨Ïö©
    from datetime import timezone as pytz_tz
    pytz = None

from supabase import create_client
from dotenv import load_dotenv

load_dotenv()

class GoogleCalendarService:
    def __init__(self):
        self.supabase_url = os.environ.get('SUPABASE_URL')
        # SERVICE_ROLE_KEYÎ•º ÏÇ¨Ïö©Ìï¥Ïïº RLSÎ•º Ïö∞ÌöåÌï† Ïàò ÏûàÏùå
        self.supabase_key = os.environ.get('SUPABASE_SERVICE_ROLE_KEY') or os.environ.get('SUPABASE_API_KEY')
        
        if not self.supabase_url or not self.supabase_key:
            raise Exception("Supabase credentials not found")
            
        self.supabase = create_client(self.supabase_url, self.supabase_key)
    
    def get_google_credentials(self, user_id: str) -> Optional[Credentials]:
        """ÏÇ¨Ïö©ÏûêÏùò Google OAuth ÌÜ†ÌÅ∞ÏúºÎ°ú Credentials Í∞ùÏ≤¥ ÏÉùÏÑ±"""
        try:
            # UUID Ï†ïÍ∑úÌôî (ÌïòÏù¥Ìîà Ìè¨Ìï® ÌòïÏãùÏúºÎ°ú ÌÜµÏùº)
            try:
                from utils.uuid_helper import normalize_uuid
                normalized_user_id = normalize_uuid(user_id)
                print(f"üîç [GOOGLE-CREDS] Original user_id: {user_id}, Normalized: {normalized_user_id}")
            except Exception as e:
                print(f"‚ö†Ô∏è [GOOGLE-CREDS] UUID normalization failed, using original: {e}")
                normalized_user_id = user_id

            # Î®ºÏ†Ä oauth_tokens ÌÖåÏù¥Î∏îÏóêÏÑú Ï∞æÍ∏∞
            response = self.supabase.table('oauth_tokens').select('*').eq('user_id', normalized_user_id).eq('platform', 'google').execute()

            token_data = None
            if response.data:
                token_data = response.data[0]
                print(f"‚úÖ Found Google OAuth token in oauth_tokens for user {normalized_user_id}")
            else:
                # oauth_tokensÏóê ÏóÜÏúºÎ©¥ calendar_sync_configsÏóêÏÑú Ï∞æÍ∏∞
                print(f"‚ö†Ô∏è No OAuth token in oauth_tokens, checking calendar_sync_configs for user {normalized_user_id}")
                sync_response = self.supabase.table('calendar_sync_configs').select('*').eq('user_id', normalized_user_id).eq('platform', 'google').eq('is_enabled', True).execute()

                if sync_response.data:
                    sync_data = sync_response.data[0]
                    credentials_data = sync_data.get('credentials', {})
                    if credentials_data.get('access_token'):
                        token_data = {
                            'access_token': credentials_data.get('access_token'),
                            'refresh_token': credentials_data.get('refresh_token'),
                            'expires_at': credentials_data.get('expires_at')
                        }
                        print(f"‚úÖ Found Google credentials in calendar_sync_configs for user {normalized_user_id}")
                    else:
                        print(f"‚ùå No valid access_token in calendar_sync_configs for user {normalized_user_id}")
                else:
                    print(f"‚ùå No Google sync config found for user {normalized_user_id}")

            if not token_data:
                print(f"‚ùå No Google credentials found for user {normalized_user_id} in any table")
                return None

            if not token_data.get('refresh_token'):
                print(f"‚ùå Missing refresh_token for user {normalized_user_id}")
                return None

            if not os.environ.get('GOOGLE_CLIENT_ID') or not os.environ.get('GOOGLE_CLIENT_SECRET'):
                print(f"‚ùå Missing Google OAuth environment variables")
                return None

            # Google Credentials Í∞ùÏ≤¥ ÏÉùÏÑ± (ÎßåÎ£å ÏãúÍ∞Ñ ÏóÜÏù¥ Î®ºÏ†Ä ÏÉùÏÑ±)
            credentials = Credentials(
                token=token_data.get('access_token'),
                refresh_token=token_data.get('refresh_token'),
                token_uri='https://oauth2.googleapis.com/token',
                client_id=os.environ.get('GOOGLE_CLIENT_ID'),
                client_secret=os.environ.get('GOOGLE_CLIENT_SECRET'),
                scopes=['https://www.googleapis.com/auth/calendar']
            )

            # ÌÜ†ÌÅ∞ ÎßåÎ£å ÏãúÍ∞Ñ ÏÑ§Ï†ïÏùÄ ÏùºÏãúÏ†ÅÏúºÎ°ú ÎπÑÌôúÏÑ±Ìôî (datetime ÎπÑÍµê ÏóêÎü¨ Î∞©ÏßÄ)
            # Google API ÎùºÏù¥Î∏åÎü¨Î¶¨Í∞Ä ÏûêÎèôÏúºÎ°ú ÌÜ†ÌÅ∞ Í∞±Ïã†ÏùÑ Ï≤òÎ¶¨Ìï† Í≤ÉÏûÑ
            # if token_data.get('expires_at'):
            #     ... (ÎπÑÌôúÏÑ±ÌôîÎê®)

            return credentials

        except Exception as e:
            print(f"‚ùå Error getting Google credentials for user {normalized_user_id if 'normalized_user_id' in locals() else user_id}: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def get_calendar_service(self, user_id: str):
        """Google Calendar API ÏÑúÎπÑÏä§ Í∞ùÏ≤¥ ÏÉùÏÑ±"""
        credentials = self.get_google_credentials(user_id)
        if not credentials:
            return None
        
        try:
            service = build('calendar', 'v3', credentials=credentials)
            return service
        except Exception as e:
            print(f"Error building Google Calendar service: {e}")
            return None

    def get_selected_calendar(self, user_id: str, calendar_id: str) -> Optional[Dict]:
        """ÏÑ†ÌÉùÎêú Ï∫òÎ¶∞Îçî Ï†ïÎ≥¥ ÌôïÏù∏"""
        try:
            # UUID Ï†ïÍ∑úÌôî
            try:
                from utils.uuid_helper import normalize_uuid
                normalized_user_id = normalize_uuid(user_id)
            except Exception as e:
                print(f"‚ö†Ô∏è UUID normalization failed, using original: {e}")
                normalized_user_id = user_id

            # Î®ºÏ†Ä user_calendars ÌÖåÏù¥Î∏îÏóêÏÑú ÏÑ†ÌÉùÎêú Ï∫òÎ¶∞ÎçîÏù∏ÏßÄ ÌôïÏù∏ (calendars ÌÖåÏù¥Î∏îÏùÄ owner_id ÏÇ¨Ïö©)
            response = self.supabase.table('calendars').select('*').eq('id', calendar_id).eq('owner_id', normalized_user_id).execute()

            if not response.data:
                print(f"Ï∫òÎ¶∞Îçî {calendar_id}Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return None

            calendar_data = response.data[0]

            # Ï∫òÎ¶∞ÎçîÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
            if not calendar_data.get('is_active', True):
                print(f"Ï∫òÎ¶∞Îçî {calendar_id}Í∞Ä ÎπÑÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§.")
                return None

            return {
                'id': calendar_data['id'],
                'name': calendar_data['name'],
                'google_calendar_id': calendar_data.get('google_calendar_id', 'primary'),
                'color': calendar_data.get('color', '#4285f4')
            }

        except Exception as e:
            print(f"Error checking selected calendar: {e}")
            return None
    
    def create_event(self, user_id: str, calendar_id: str, event_data: Dict[str, Any]) -> Optional[Dict]:
        """Google CalendarÏóê ÏùºÏ†ï ÏÉùÏÑ±"""
        service = self.get_calendar_service(user_id)
        if not service:
            return None

        # ÏÑ†ÌÉùÎêú Ï∫òÎ¶∞ÎçîÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
        selected_calendar = self.get_selected_calendar(user_id, calendar_id)
        if not selected_calendar:
            print(f"Ï∫òÎ¶∞Îçî {calendar_id}Í∞Ä ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÍ±∞ÎÇò Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
            return None

        try:
            # Google Calendar ÏùºÏ†ï ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
            google_event = self._convert_to_google_event(event_data)

            # ÏÑ†ÌÉùÎêú Ï∫òÎ¶∞ÎçîÏóê ÏùºÏ†ï ÏÉùÏÑ±
            created_event = service.events().insert(
                calendarId=selected_calendar['google_calendar_id'],
                body=google_event
            ).execute()

            print(f"Google Calendar ÏùºÏ†ï ÏÉùÏÑ± ÏôÑÎ£å: {created_event['id']}")
            return created_event
            
        except HttpError as e:
            print(f"Google Calendar API error: {e}")
            return None
        except Exception as e:
            print(f"Error creating Google Calendar event: {e}")
            return None
    
    def update_event(self, user_id: str, event_id: str, event_data: Dict[str, Any]) -> Optional[Dict]:
        """Google Calendar ÏùºÏ†ï ÏóÖÎç∞Ïù¥Ìä∏"""
        service = self.get_calendar_service(user_id)
        if not service:
            return None
        
        try:
            google_event = self._convert_to_google_event(event_data)
            
            updated_event = service.events().update(
                calendarId='primary',
                eventId=event_id,
                body=google_event
            ).execute()
            
            print(f"Google Calendar ÏùºÏ†ï ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: {event_id}")
            return updated_event
            
        except HttpError as e:
            print(f"Google Calendar API error: {e}")
            return None
        except Exception as e:
            print(f"Error updating Google Calendar event: {e}")
            return None
    
    def delete_event(self, user_id: str, event_id: str) -> bool:
        """Google Calendar ÏùºÏ†ï ÏÇ≠Ï†ú"""
        service = self.get_calendar_service(user_id)
        if not service:
            return False
        
        try:
            service.events().delete(
                calendarId='primary',
                eventId=event_id
            ).execute()
            
            print(f"Google Calendar ÏùºÏ†ï ÏÇ≠Ï†ú ÏôÑÎ£å: {event_id}")
            return True
            
        except HttpError as e:
            print(f"Google Calendar API error: {e}")
            return False
        except Exception as e:
            print(f"Error deleting Google Calendar event: {e}")
            return False
    
    def get_calendar_list(self, user_id: str) -> List[Dict]:
        """ÏÇ¨Ïö©ÏûêÏùò Google Calendar Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞"""
        service = self.get_calendar_service(user_id)
        if not service:
            print(f"[Google Calendar] No service available for user {user_id}")
            return []

        try:
            # Google Calendar Î™©Î°ù Ï°∞Ìöå
            calendar_list_result = service.calendarList().list().execute()
            calendars = calendar_list_result.get('items', [])

            # Ï∫òÎ¶∞Îçî Ï†ïÎ≥¥ Ï†ïÎ¶¨
            formatted_calendars = []
            for calendar in calendars:
                try:
                    calendar_info = {
                        'id': calendar.get('id'),
                        'name': calendar.get('summary', 'Untitled Calendar'),
                        'description': calendar.get('description', ''),
                        'color': calendar.get('backgroundColor', '#3B82F6'),
                        'timezone': calendar.get('timeZone', 'Asia/Seoul'),
                        'access_role': calendar.get('accessRole', 'reader'),
                        'is_primary': calendar.get('primary', False),
                        'is_selected': calendar.get('selected', True)
                    }
                    formatted_calendars.append(calendar_info)
                except Exception as calendar_error:
                    print(f"Error processing calendar {calendar.get('id', 'unknown')}: {calendar_error}")
                    # ÏóêÎü¨Í∞Ä Î∞úÏÉùÌïú Ï∫òÎ¶∞ÎçîÎäî Í±¥ÎÑàÎõ∞Í≥† Í≥ÑÏÜç ÏßÑÌñâ
                    continue

            print(f"Google CalendarÏóêÏÑú {len(formatted_calendars)}Í∞ú Ï∫òÎ¶∞Îçî Ï°∞Ìöå")
            return formatted_calendars

        except HttpError as e:
            print(f"Google Calendar API error: {e}")
            return []
        except Exception as e:
            print(f"Error getting Google Calendar list: {e}")
            # ÏÉÅÏÑ∏Ìïú ÏóêÎü¨ Ï†ïÎ≥¥ Ï∂úÎ†•
            import traceback
            print(f"Detailed error traceback: {traceback.format_exc()}")
            return []
    
    def get_events(self, user_id: str, calendar_id: str = 'primary', time_min: datetime = None, time_max: datetime = None) -> List[Dict]:
        """Google CalendarÏóêÏÑú ÏùºÏ†ï Í∞ÄÏ†∏Ïò§Í∏∞"""
        service = self.get_calendar_service(user_id)
        if not service:
            return []
        
        try:
            # Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï - timezone-aware datetime ÏÇ¨Ïö©
            if not time_min:
                if pytz:
                    time_min = datetime.now(pytz.UTC) - timedelta(days=30)
                else:
                    from datetime import timezone
                    time_min = datetime.now(timezone.utc) - timedelta(days=30)
            elif hasattr(time_min, 'tzinfo') and time_min.tzinfo is None:
                # timezone-naive datetimeÏù∏ Í≤ΩÏö∞ UTCÎ°ú Î≥ÄÌôò
                from datetime import timezone
                time_min = time_min.replace(tzinfo=timezone.utc)

            if not time_max:
                if pytz:
                    time_max = datetime.now(pytz.UTC) + timedelta(days=90)
                else:
                    from datetime import timezone
                    time_max = datetime.now(timezone.utc) + timedelta(days=90)
            elif hasattr(time_max, 'tzinfo') and time_max.tzinfo is None:
                # timezone-naive datetimeÏù∏ Í≤ΩÏö∞ UTCÎ°ú Î≥ÄÌôò
                from datetime import timezone
                time_max = time_max.replace(tzinfo=timezone.utc)
            
            # Google CalendarÏóêÏÑú ÏùºÏ†ï Ï°∞Ìöå
            events_result = service.events().list(
                calendarId=calendar_id,
                timeMin=time_min.isoformat(),
                timeMax=time_max.isoformat(),
                maxResults=100,
                singleEvents=True,
                orderBy='startTime'
            ).execute()
            
            events = events_result.get('items', [])
            print(f"Google Calendar({calendar_id})ÏóêÏÑú {len(events)}Í∞ú ÏùºÏ†ï Ï°∞Ìöå")
            
            return events
            
        except HttpError as e:
            print(f"Google Calendar API error: {e}")
            return []
        except Exception as e:
            print(f"Error getting Google Calendar events: {e}")
            return []
    
    def _convert_to_google_event(self, event_data: Dict[str, Any]) -> Dict[str, Any]:
        """Notion ÏùºÏ†ï Îç∞Ïù¥ÌÑ∞Î•º Google Calendar ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò"""
        google_event = {
            'summary': event_data.get('title', 'Untitled Event'),
            'description': event_data.get('description', ''),
        }
        
        # ÏãúÍ∞Ñ ÏÑ§Ï†ï
        if event_data.get('start_time') and event_data.get('end_time'):
            # ÏãúÍ∞ÑÏù¥ ÏûàÎäî ÏùºÏ†ï
            google_event['start'] = {
                'dateTime': event_data['start_time'],
                'timeZone': 'Asia/Seoul'
            }
            google_event['end'] = {
                'dateTime': event_data['end_time'], 
                'timeZone': 'Asia/Seoul'
            }
        elif event_data.get('date'):
            # Ï¢ÖÏùº ÏùºÏ†ï
            google_event['start'] = {'date': event_data['date']}
            google_event['end'] = {'date': event_data['date']}
        
        # ÏúÑÏπò ÏÑ§Ï†ï
        if event_data.get('location'):
            google_event['location'] = event_data['location']
        
        # Ï∞∏ÏÑùÏûê ÏÑ§Ï†ï (ÏòµÏÖò)
        if event_data.get('attendees'):
            google_event['attendees'] = [
                {'email': email} for email in event_data['attendees']
            ]
        
        # ÏïåÎ¶º ÏÑ§Ï†ï
        if event_data.get('reminders'):
            google_event['reminders'] = {
                'useDefault': False,
                'overrides': [
                    {'method': 'email', 'minutes': 24 * 60},  # 1Ïùº Ï†Ñ Ïù¥Î©îÏùº
                    {'method': 'popup', 'minutes': 10}        # 10Î∂Ñ Ï†Ñ ÌåùÏóÖ
                ]
            }
        
        return google_event
    
    def sync_notion_events_to_google(self, user_id: str, notion_events: List[Dict]) -> Dict[str, int]:
        """Notion ÏùºÏ†ïÎì§ÏùÑ Google CalendarÏóê ÎèôÍ∏∞Ìôî"""
        synced_count = 0
        failed_count = 0
        
        for event in notion_events:
            try:
                # Google CalendarÏóê ÏùºÏ†ï ÏÉùÏÑ±
                google_event = self.create_event(user_id, 'primary', event)
                
                if google_event:
                    # Ïó∞Îèô Ï†ïÎ≥¥ Ï†ÄÏû• (Ìñ•ÌõÑ ÏóÖÎç∞Ïù¥Ìä∏/ÏÇ≠Ï†úÎ•º ÏúÑÌï¥)
                    self._save_sync_mapping(
                        user_id=user_id,
                        notion_event_id=event.get('id'),
                        google_event_id=google_event['id']
                    )
                    synced_count += 1
                else:
                    failed_count += 1
                    
            except Exception as e:
                print(f"Error syncing event {event.get('id', 'unknown')}: {e}")
                failed_count += 1
        
        return {
            'synced_count': synced_count,
            'failed_count': failed_count,
            'total_count': len(notion_events)
        }
    
    def _save_sync_mapping(self, user_id: str, notion_event_id: str, google_event_id: str):
        """ÏùºÏ†ï ÎèôÍ∏∞Ìôî Îß§Ìïë Ï†ïÎ≥¥ Ï†ÄÏû•"""
        try:
            self.supabase.table('event_sync_mapping').upsert({
                'user_id': user_id,
                'notion_event_id': notion_event_id,
                'google_event_id': google_event_id,
                'platform': 'google',
                'synced_at': datetime.now().isoformat(),
                'sync_status': 'synced'
            }).execute()
        except Exception as e:
            print(f"Error saving sync mapping: {e}")

# Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§ - ÏßÄÏó∞ ÏÉùÏÑ±
_google_calendar_service = None

def get_google_calendar_service():
    global _google_calendar_service
    if _google_calendar_service is None:
        _google_calendar_service = GoogleCalendarService()
    return _google_calendar_service

# ÌïòÏúÑ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú ÏÜçÏÑ±
google_calendar_service = get_google_calendar_service()